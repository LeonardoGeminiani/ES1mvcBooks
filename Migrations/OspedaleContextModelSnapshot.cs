// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ES1.Migrations
{
    [DbContext(typeof(OspedaleContext))]
    partial class OspedaleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ES1.Models.Farmaco", b =>
                {
                    b.Property<int>("FarmacoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrizione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrincipioAttivo")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantitaScatole")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Scadenza")
                        .HasColumnType("TEXT");

                    b.HasKey("FarmacoId");

                    b.ToTable("Farmaci");
                });

            modelBuilder.Entity("ES1.Models.Medico", b =>
                {
                    b.Property<int>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specializzazione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.HasKey("MedicoId");

                    b.ToTable("Medici");
                });

            modelBuilder.Entity("ES1.Models.Paziente", b =>
                {
                    b.Property<string>("CF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cap")
                        .HasColumnType("TEXT");

                    b.Property<string>("Citta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cognome")
                        .HasColumnType("TEXT");

                    b.Property<int>("DataNascita")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Indirizzo")
                        .HasColumnType("TEXT");

                    b.Property<string>("LuogoNascita")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patologia")
                        .HasColumnType("TEXT");

                    b.Property<int>("RepartoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.HasKey("CF");

                    b.HasIndex("RepartoId");

                    b.ToTable("Pazienti");
                });

            modelBuilder.Entity("ES1.Models.Reparto", b =>
                {
                    b.Property<int>("RepartoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descrizione")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroLetti")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Piano")
                        .HasColumnType("TEXT");

                    b.Property<string>("Primario")
                        .HasColumnType("TEXT");

                    b.HasKey("RepartoId");

                    b.ToTable("Reparti");
                });

            modelBuilder.Entity("ES1.Models.Terapia", b =>
                {
                    b.Property<string>("CF")
                        .HasColumnType("TEXT");

                    b.Property<int>("FarmacoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Posologia")
                        .HasColumnType("TEXT");

                    b.HasKey("CF", "FarmacoId");

                    b.HasIndex("FarmacoId");

                    b.ToTable("Terapie");
                });

            modelBuilder.Entity("ES1.Models.Visita", b =>
                {
                    b.Property<int>("VisitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrizione")
                        .HasColumnType("TEXT");

                    b.Property<int>("FrequenzaCardiaca")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("Ora")
                        .HasColumnType("TEXT");

                    b.Property<string>("PazienteCF")
                        .HasColumnType("TEXT");

                    b.Property<int>("PressioneMassima")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PressioneMinima")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatoSalute")
                        .HasColumnType("TEXT");

                    b.Property<float>("Temperatura")
                        .HasColumnType("REAL");

                    b.HasKey("VisitaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PazienteCF");

                    b.ToTable("Visite");
                });

            modelBuilder.Entity("ES1.Models.Paziente", b =>
                {
                    b.HasOne("ES1.Models.Reparto", "reparto")
                        .WithMany("Pazienti")
                        .HasForeignKey("RepartoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reparto");
                });

            modelBuilder.Entity("ES1.Models.Terapia", b =>
                {
                    b.HasOne("ES1.Models.Paziente", "Paziente")
                        .WithMany("Terapie")
                        .HasForeignKey("CF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ES1.Models.Farmaco", "Farmaco")
                        .WithMany("Terapie")
                        .HasForeignKey("FarmacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmaco");

                    b.Navigation("Paziente");
                });

            modelBuilder.Entity("ES1.Models.Visita", b =>
                {
                    b.HasOne("ES1.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ES1.Models.Paziente", "Paziente")
                        .WithMany("Visite")
                        .HasForeignKey("PazienteCF");

                    b.Navigation("Medico");

                    b.Navigation("Paziente");
                });

            modelBuilder.Entity("ES1.Models.Farmaco", b =>
                {
                    b.Navigation("Terapie");
                });

            modelBuilder.Entity("ES1.Models.Paziente", b =>
                {
                    b.Navigation("Terapie");

                    b.Navigation("Visite");
                });

            modelBuilder.Entity("ES1.Models.Reparto", b =>
                {
                    b.Navigation("Pazienti");
                });
#pragma warning restore 612, 618
        }
    }
}
